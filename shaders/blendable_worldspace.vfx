//=========================================================================================================================
// Optional
//=========================================================================================================================
HEADER
{
	CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
	Description = "Blendable World Normal";
	Version = 1;
	DevShader = false;
}

//=========================================================================================================================
// Optional
//=========================================================================================================================
FEATURES
{
    #include "common/features.hlsl"
}

//=========================================================================================================================
// Optional
//=========================================================================================================================
MODES
{
    VrForward();													// Indicates this shader will be used for main rendering
    Depth( "vr_depth_only.vfx" ); 									// Shader that will be used for shadowing and depth prepass
    ToolsVis( S_MODE_TOOLS_VIS ); 									// Ability to see in the editor
    ToolsWireframe( "vr_tools_wireframe.vfx" ); 					// Allows for mat_wireframe to work
	ToolsShadingComplexity( "vr_tools_shading_complexity.vfx" ); 	// Shows how expensive drawing is in debug view
}

//=========================================================================================================================
COMMON
{
	#include "common/shared.hlsl"
	
}

//=========================================================================================================================

struct VertexInput
{
	#include "common/vertexinput.hlsl"
	
};

//=========================================================================================================================

struct PixelInput
{
	#include "common/pixelinput.hlsl"
	
	float3 vPositionOs : POSITION;
	float4 vNormalOs : NORMAL;
	float2 vTexCoord : TEXCOORD0;
};

//=========================================================================================================================

VS
{
	#include "common/vertex.hlsl"
	
	PixelInput MainVs( INSTANCED_SHADER_PARAMS( VS_INPUT i ) )
	{
		PixelInput o = ProcessVertex( i );
		// Add your vertex manipulation functions here
				
		return FinalizeVertex( o );
	}
}

//=========================================================================================================================

PS
{
    #include "common/pixel.hlsl"
	#include "common/pixel_blend.hlsl"

	PixelOutput MainPs( PixelInput i )
	{
		float3 position = vPositionOs;
		float3 worldNormal = i.vNormalOs.xyz;
		float2 vUV = i.vTexCoord.xy;
		
        //MaterialParameters_t matA = TexToMaterialParameters( Tex2DS( g_tColorA, TextureFiltering, vUV ), Tex2DS( g_tNormalA, TextureFiltering, vUV ), Tex2DS( g_tRmaA, TextureFiltering, vUV ), g_flTintColorA);
		//MaterialParameters_t matB = TexToMaterialParameters( Tex2DS( g_tColorB, TextureFiltering, vUV ), Tex2DS( g_tNormalB, TextureFiltering, vUV ), Tex2DS( g_tRmaB, TextureFiltering, vUV ), g_flTintColorB);
		
		//material = MaterialParametersMultiblend( matA, matB, worldNormal.b, g_flBlendSoftnessB );
	
		Material m = GatherMaterial( i );
		/* m.Metalness = 1.3f; // Forces the object to be metalic */
		return FinalizePixelMaterial( i, m );
	}
}